from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from keyboards.inline.date_markup import date_keyboard
from keyboards.inline.lash_markup import markup
from keyboards.inline.time_markup import time_markup
from loader import dp
from states.get_contacts import GetContacts
from utils.db_api.commands.customers import get_info, update_phone, update_name, update_date, update_time, \
    update_service_name
from utils.db_api.commands.service import check_rows, get_info_service
from utils.db_api.commands.time_service import delete_time
from utils.send_for_admin import new_customer
from utils.validators_phone import validator


@dp.message_handler(Text(equals='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'))
async def recording(message: types.Message):
    if await check_rows() is True:
        await message.answer('üíÅ‚Äç‚ôÄ–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.')
    else:
        keyboard = await markup()
        photo = 'AgACAgIAAxkBAAIDzGITkqgqVjG11a87Tq-B21vxRdiuAAKNuTEbg_2ZSNsHfH_VyRj5AQADAgADeQADIwQ'
        await message.answer_photo(photo=photo, caption='üíÅ‚Äç‚ôÄ–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:',
                                   reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='service_'))
async def get_service(call: types.CallbackQuery):
    await call.message.delete()
    global msg, super_msg
    global reg
    reg = call.data.split('_')
    information = await get_info_service(name=reg[1])
    await update_service_name(telegram_id=call.from_user.id, service_name=reg[1])
    row = information.split('&')
    photo = 'AgACAgIAAxkBAAID1GITkuQDWdAGXWNvuuAEstuVFmzIAAKYuTEbg_2ZSNQ_l4W7n_W8AQADAgADeQADIwQ'
    super_msg = await call.message.answer_photo(photo, f'üíÅ‚Äç‚ôÄ–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ - <b>{row[0]}</b>\n\n'
                                                       f'{row[1]}\n\n'
                                                       f'üí∞–¶–µ–Ω–∞ - <b>{row[2]} —Ä.</b>\n\n'
                                                       f'üìÖ–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏',
                                                reply_markup=date_keyboard)


@dp.callback_query_handler(Text(startswith='date_'))
async def get_time_for_service(call: types.CallbackQuery):
    await call.message.delete()
    global data
    data = call.data.split('_')
    date = data[1]
    await update_date(telegram_id=call.from_user.id, data=date)
    keyboard = await time_markup(name=reg[1], day=data[1])
    photo = 'AgACAgIAAxkBAAID0mITkrcLJKK2ydvsFX-BGFoczY5YAAKXuTEbg_2ZSBFUe-kL695VAQADAgADeQADIwQ'
    await call.message.answer_photo(photo,
                                    'üôÜ‚Äç‚ôÄ–í—ã–±–µ—Ä–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏', reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='time_'))
async def get_service(call: types.CallbackQuery):
    await call.message.delete()
    global regex, msg
    regex = call.data.split('_')
    time = regex[1]
    await update_time(telegram_id=call.from_user.id, time=time)
    check = await get_info(call.from_user.id)
    if check.split('&')[0] == 'none':
        photo = 'AgACAgIAAxkBAAIDzmITkq5sKtW7uVgGDdSamYtz2UZFAAKUuTEbg_2ZSEx6FYfv8YzNAQADAgADeQADIwQ'
        msg = await call.message.answer_photo(photo=photo,
                                              caption='üë©‚Äçüíª–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —É–∫–∞–∂–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n'
                                                      '–ß—Ç–æ–±—ã —è —Å–≤—è–∑–∞–ª–∞—Å—å —Å —Ç–æ–±–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π\n\n'
                                                      '–ü—Ä–∏–º–µ—Ä: +79556950553')
        await GetContacts.first()
    else:
        photo = 'AgACAgIAAxkBAAID0GITkrOvSelYRu8oMS9giFUvhGqZAAKWuTEbg_2ZSJlLkFNCGglxAQADAgADeQADIwQ'
        msg = await call.message.answer_photo(photo=photo, caption='–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!\n'
                                                                   '–í—Å–∫–æ—Ä–µ —è —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å!\n'
                                                                   '–ù–∞–¥–µ—é—Å—å –≤—Å–∫–æ—Ä–µ —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ —Å–≤–æ–µ–º —É—é—Ç–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ! ü§ó')
        information = await get_info(telegram_id=call.from_user.id)
        await new_customer(name=information.split('&')[0], phone=information.split('&')[1])
        await delete_time(time_id=regex[3])


@dp.message_handler(state=GetContacts.Phone)
async def get_phone(message: types.Message):
    await msg.delete()
    global number, mess
    text = message.text

    phone = await validator(phone=text)

    if phone:
        mess = await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è.')
        await update_phone(telegram_id=message.from_user.id, phone=text)
        number = text
        await GetContacts.Name.set()
    else:
        mess = await message.answer('–ù–æ–º–µ—Ä –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        await GetContacts.Phone.set()


@dp.message_handler(state=GetContacts.Name)
async def get_name(message: types.Message, state: FSMContext):
    await mess.delete()
    name = message.text
    await update_name(telegram_id=message.from_user.id, name=name)
    photo = 'AgACAgIAAxkBAAID0GITkrOvSelYRu8oMS9giFUvhGqZAAKWuTEbg_2ZSJlLkFNCGglxAQADAgADeQADIwQ'
    await message.answer_photo(photo=photo, caption='–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!\n'
                                                    '–í—Å–∫–æ—Ä–µ —è —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å!\n'
                                                    '–ù–∞–¥–µ—é—Å—å –≤—Å–∫–æ—Ä–µ —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ —Å–≤–æ–µ–º —É—é—Ç–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ! ü§ó')
    await state.reset_state()
    await delete_time(time_id=regex[3])
    await new_customer(name, phone=number)


@dp.callback_query_handler(Text(equals='back'))
async def go_back(call: types.CallbackQuery):
    await super_msg.delete()
    await recording(message=call.message)
